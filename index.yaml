# Conference Central (Udacity Full Stack Project #4)
# GAE Datastore Index Definitions
#
# Author: Richard Gieg
# Website: http://www.richgieg.com
#
#
# The comments throughout this file describe the algorithm I used to generate
# all of the necessary indexes to handle all possible filter combinations the
# user may submit to the queryConferences API.
#
# I chose to document this process in order to have a reference guide later on
# when I need to ensure that I'm covering all possible queries over a set of
# properties, while making sure to use the fewest index definitions. I hope
# this is informative for others as well.
#
#
# Truths to keep in mind:
#
#   1. The 'name' property must be present and must always be last, since
#      it is used for sorting.
#
#   2. A property that is the target of an inequality filter must always
#      come after properties that are targets of equality filters (if any).
#
#   3. The order of properties, as they are defined in the indexes, does not
#      matter if they are targets of equality filters.
#
#   4. The properties (fields) that can be targets of user-defined filters are:
#      'city', 'maxAttendees', 'month' and 'topics'.
#
#   5. The Combination Formula ("n choose k"), which is used to determine the
#      number of possible combinations of k objects from a set of n objects:
#      C(n,k) = n! / (k! (n - k)!)


indexes:

###############################################################################
###     Group 1
###############################################################################

# Calculating the indexes in "Group 1":
#
# The most simple of them all, this group only contains four indexes, each with
# only two properties. The goal of this group is to cover the cases when a user
# submits a query containing only one filter. The filter in question can either
# be an equality filter or an inequality filter. The 'name' property is required
# and must be the last property in each index definition (see Truth #1 at the
# top of this file). Each index definition lines up with one property from the
# set of possible filter targets (see Truth #4). It may be beneficial to ignore
# the 'name' property in all index definitions in all four groups, since it is
# always present.

- kind: Conference
  properties:
  - name: city
  - name: name

- kind: Conference
  properties:
  - name: maxAttendees
  - name: name

- kind: Conference
  properties:
  - name: month
  - name: name

- kind: Conference
  properties:
  - name: topics
  - name: name


###############################################################################
###     Group 2
###############################################################################

# Calculating the indexes in "Group 2":
#
# This is where things start to get interesting. The goal of this group is to
# cover the cases when a user submits a query containing two filters. The pair
# can either be two equality filters or one equality filter and one inequality
# filter. Below is the smallest number of indexes that will handle these cases.
# We must take into account that each of the four filter properties (Truth #4)
# may be the target of an inequality filter. For each of the four properties,
# three indexes are defined. In each one, the second field is the one that
# represents the target of an inequality filter (or equality filter), whereas
# the first field represents the target of an equality filter. The third field,
# 'name', can be disregarded as not important to this discussion. So, why are
# three indexes defined for each of the four properties? This is to cover all
# possibilities given the set of properties we're working with.

# Let p represent the number of properties, which is four. Let n represent the
# left over properties, when one property is assumed to be the target of an
# inequality filter. Therefore n is equal to three. Let k represent the number
# of "slots to fill" for equality filter targets, which is one in this case.
# Given the Combination Formula (Truth #5), we can see that the number of
# possible combinations of one object from a set of three objects is three:

# C(n,k) = n! / (k! (n - k)!)
# C(3,1) = 3! / (1! (3 - 1)!)
#        = 6 / (1 (2)!)
#        = 6 / 2
#        = 3

# Let i represent the number of required indexes.

# i = 3p
#   = 3(4)
#   = 12

# Observe the first three index definitions below. The 'city' property is
# assumed to be the target of an inequality filter (even if it is the target
# of an equality filter, however, it still serves its purpose). Notice how
# each of the three index definitions references a unique member of the
# remaining set of three properties.

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: month           # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: topics          # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: month           # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: topics          # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: topics          # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: topics          # inequality target
  - name: name

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: topics          # inequality target
  - name: name

- kind: Conference
  properties:
  - name: month           # equality target
  - name: topics          # inequality target
  - name: name


###############################################################################
###     Group 3
###############################################################################

# Calculating the indexes in "Group 3":
#
# This is quite similar to the previous section. The goal of this group is to
# cover the cases when a user submits a query containing three filters. They
# can either be three equality filters or two equality filters and one
# inequality filter. Below is the smallest number of indexes that will handle
# these cases. Again, for each of the four properties, three indexes are
# defined. This time, in each one, it is the third field which represents the
# target of an inequality filter (or equality filter), whereas the first and
# second fields represent the targets of equality filters. Again, the fourth
# field, 'name', may be disregarded as not important to this discussion.
# Why are three indexes defined for each of the four properties?

# Let p represent the number of properties, which is four. Let n represent the
# left over properties, when one property is assumed to be the target of an
# inequality filter. Therefore n is equal to three. Let k represent the number
# of "slots to fill" for equality filter targets, which is two in this case.
# Given the Combination Formula (Truth #5), we can see that the number of
# possible combinations of two objects from a set of three objects is three:

# C(n,k) = n! / (k! (n - k)!)
# C(3,2) = 3! / (2! (3 - 2)!)
#        = 6 / (2 (1)!)
#        = 6 / 2
#        = 3

# Let i represent the number of required indexes.

# i = 3p
#   = 3(4)
#   = 12

# Observe the first three index definitions below. The 'city' property is
# assumed to be the target of an inequality filter (even if it is the target
# of an equality filter, however, it still serves its purpose). Notice how the
# first two fields in each of the three index definitions references one of the
# three possible combinations of two members of the remaining set of three
# properties. Remember, the order of the equality targets does not matter.

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: month           # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: topics          # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: month           # equality target
  - name: topics          # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: month           # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: topics          # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: month           # equality target
  - name: topics          # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: maxAttendees    # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: topics          # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: topics          # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: maxAttendees    # equality target
  - name: topics          # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: month           # equality target
  - name: topics          # inequality target
  - name: name

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: month           # equality target
  - name: topics          # inequality target
  - name: name


###############################################################################
###     Group 4
###############################################################################

# Calculating the indexes in "Group 4":
#
# This is very similar to the previous sections. The goal of this group is to
# cover the cases when a user submits a query containing four filters. They
# can either be four equality filters or three equality filters and one
# inequality filter. Below is the smallest number of indexes that will handle
# these cases. This time, for each of the four properties, only one index is
# necessary. In each one, it is the fourth field which represents the
# target of an inequality filter (or equality filter), whereas the first,
# second and third fields represent the targets of equality filters. Again, the
# 'name' field may be disregarded as not important to this discussion.
# Why is only one index defined for each of the four properties?

# Let p represent the number of properties, which is four. Let n represent the
# left over properties, when one property is assumed to be the target of an
# inequality filter. Therefore n is equal to three. Let k represent the number
# of "slots to fill" for equality filter targets, which is three in this case.
# Given the Combination Formula (Truth #5), we can see that the number of
# possible combinations of three objects from a set of three objects is one:

# C(n,k) = n! / (k! (n - k)!)
# C(3,3) = 3! / (3! (3 - 3)!)
#        = 6 / (6 (0)!)
#        = 6 / 6
#        = 1

# Let i represent the number of required indexes.

# i = 1p
#   = 1(4)
#   = 4

# Observe the four index definitions below. The fourth property is assumed to
# be the target of an inequality filter (even if it is the target of an
# equality filter, however, it still serves its purpose). Notice how the first
# three fields in each of the four index definitions references the one possible
# combination of three members of the remaining set of three properties.
# Remember, the order of the equality targets does not matter.

- kind: Conference
  properties:
  - name: maxAttendees    # equality target
  - name: month           # equality target
  - name: topics          # equality target
  - name: city            # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: month           # equality target
  - name: topics          # equality target
  - name: maxAttendees    # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: maxAttendees    # equality target
  - name: topics          # equality target
  - name: month           # inequality target
  - name: name

- kind: Conference
  properties:
  - name: city            # equality target
  - name: maxAttendees    # equality target
  - name: month           # equality target
  - name: topics          # inequality target
  - name: name



###############################################################################
###     Additional Indexes (part of Task 3 exercise)
###############################################################################

# Required by ConferenceApi.getSessionsByHighlightSearch
- kind: Session
  properties:
  - name: highlights
  - name: name

# Required by ConferenceApi.getSessionsDoubleInequalityDemo
- kind: Session
  properties:
  - name: typeOfSession
  - name: startTime

# Required by ConferenceApi._updateFeaturedSpeaker (necessary because I use
# a projection query to retrieve the name property)
- kind: Session
  properties:
  - name: conference
  - name: speakerWebsafeKey
  - name: name
